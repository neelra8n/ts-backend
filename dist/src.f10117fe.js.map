{"version":3,"sources":["src/view/UserForm.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,UAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,IAAM,QAAQ,GAAG,IAAI,UAAA,CAAA,QAAJ,CAAa,QAAQ,CAAC,cAAT,CAAwB,MAAxB,CAAb,CAAjB;AAEA,QAAQ,CAAC,MAAT;;;;;;;;;;;;;;;;IDHa;AACT,oBAAmB,MAAnB,EAAkC;AAAA;;AAAf,SAAA,MAAA,GAAA,MAAA;AAAkB;;;;WAErC,qBAAS;AACL,aAAO;AACH,wBAAiB,KAAK,aADnB;AAEH,0BAAmB,KAAK;AAFrB,OAAP;AAIH;;;WAED,yBAAa;AACT,MAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AAEH;;;WAED,yBAAa;AACT,MAAA,OAAO,CAAC,GAAR,CAAY,cAAZ;AACH;;;WAED,oBAAW,QAAX,EAAqC;AACjC,UAAM,QAAQ,GAAG,KAAK,SAAL,EAAjB;;AADiC,iCAGzB,QAHyB;AAI7B,8BAA8B,QAAQ,CAAC,KAAT,CAAe,GAAf,CAA9B;AAAA;AAAA,YAAO,SAAP;AAAA,YAAkB,QAAlB;;AAEA,QAAA,QAAQ,CAAC,gBAAT,CAA0B,QAA1B,EAAoC,OAApC,CAA4C,UAAA,GAAG,EAAG;AAC9C,UAAA,GAAG,CAAC,gBAAJ,CAAqB,SAArB,EAAgC,QAAQ,CAAC,QAAD,CAAxC;AACH,SAFD;AAN6B;;AAGjC,WAAI,IAAI,QAAR,IAAoB,QAApB,EAA6B;AAAA,cAArB,QAAqB;AAO5B;AACJ;;;WAED,oBAAQ;AACJ;AAOH;;;WAED,kBAAM;AACF,UAAM,eAAe,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAxB;AACA,MAAA,eAAe,CAAC,SAAhB,GAA4B,KAAK,QAAL,EAA5B;AACA,WAAK,UAAL,CAAgB,eAAe,CAAC,OAAhC;AACA,WAAK,MAAL,CAAY,MAAZ,CAAmB,eAAe,CAAC,OAAnC;AACH;;;;;;AA/CL,OAAA,CAAA,QAAA,GAAA,QAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["\nexport class UserForm {\n    constructor(public parent: Element){}\n\n    eventsMap(): {[key: string]: ()=> void } {\n        return {\n            'click:button' : this.onButtonClick,\n            ' mouseenter:h1' : this.onHeaderHover\n        };\n    }\n\n    onButtonClick(): void {\n        console.log(\"jhgjh\");\n        \n    }\n\n    onHeaderHover():void {\n        console.log(\"Hover header\");\n    }\n\n    bindEvents(fragment: DocumentFragment): void {\n        const eventMap = this.eventsMap();\n\n        for(let eventKey in eventMap){\n            const [eventName, selector] = eventKey.split(':');\n\n            fragment.querySelectorAll(selector).forEach(ele => {\n                ele.addEventListener(eventName, eventMap[eventKey]);\n            })\n            \n        }\n    }\n\n    template(): string {\n        return `\n            <div>\n                <h1>UserForm</h1>\n                <input />\n                <button>click me</button>\n            </div>\n        `;\n    }\n\n    render(): void {\n        const templateElement = document.createElement('template');\n        templateElement.innerHTML = this.template();\n        this.bindEvents(templateElement.content)\n        this.parent.append(templateElement.content);\n    }\n}  ","import { UserForm } from \"./view/UserForm\";\n\nconst userForm = new UserForm(document.getElementById('root'))\n\nuserForm.render(); "]}